{"version":3,"file":"camera_stream.js","sourceRoot":"","sources":["../../src/camera/camera_stream.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as React from 'react';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {\n  StyleSheet,\n  PixelRatio,\n  LayoutChangeEvent,\n  Platform\n} from 'react-native';\nimport { Camera } from 'expo-camera';\nimport { GLView, ExpoWebGLRenderingContext } from 'expo-gl';\nimport { fromTexture, renderToGLView, detectGLCapabilities } from './camera';\n\ninterface WrappedComponentProps {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  // tslint:disable-next-line: no-any\n  [index: string]: any;\n}\n\ninterface Props {\n  cameraTextureWidth: number;\n  cameraTextureHeight: number;\n  resizeWidth: number;\n  resizeHeight: number;\n  resizeDepth: number;\n  autorender: boolean;\n  onReady: (\n    images: IterableIterator<tf.Tensor3D>,\n    updateCameraPreview: () => void,\n    gl: ExpoWebGLRenderingContext,\n    cameraTexture: WebGLTexture,\n  ) => void;\n}\n\ninterface State {\n  cameraLayout: { x: number; y: number; width: number; height: number };\n}\n\nconst DEFAULT_AUTORENDER = true;\nconst DEFAULT_RESIZE_DEPTH = 3;\n\n/**\n * A higher-order-component (HOC) that augments the [Expo.Camera](https://docs.expo.io/versions/latest/sdk/camera/)\n * component with the ability to yield tensors representing the camera stream.\n *\n * Because the camera data will be consumed in the process, the original\n * camera component will not render any content. This component provides\n * options that can be used to render the camera preview.\n *\n * Notably the component allows on-the-fly resizing of the camera image to\n * smaller dimensions, this speeds up data transfer between the native and\n * javascript threads immensely.\n *\n * __In addition to__ all the props taken by Expo.Camera. The returned\n * component takes the following props\n *\n * - __cameraTextureWidth__: number — the width the camera preview texture\n *   (see example and note below)\n * - __cameraTextureHeight__: number — the height the camera preview texture\n *   (see example and note below)\n * - __resizeWidth__: number — the width of the output tensor\n * - __resizeHeight__: number — the height of the output tensor\n * - __resizeDepth__: number — the depth (num of channels) of the output tensor.\n *    Should be 3 or 4.\n * - __autorender__: boolean — if true the view will be automatically updated\n *   with the contents of the camera. Set this to false if you want more direct\n *   control on when rendering happens.\n * - __onReady__: (\n *    images: IterableIterator<tf.Tensor3D>,\n *    updateCameraPreview: () => void,\n *    gl: ExpoWebGLRenderingContext,\n *    cameraTexture: WebGLTexture\n *  ) => void — When the component is mounted and ready this callback will\n *  be called and recieve the following 3 elements:\n *    - __images__ is a (iterator)[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators]\n *      that yields tensors representing the camera image on demand.\n *    - __updateCameraPreview__ is a function that will update the WebGL render\n *      buffer with the contents of the camera. Not needed when `autorender`\n *      is true\n *    - __gl__ is the ExpoWebGl context used to do the rendering. After calling\n *      `updateCameraPreview` and any other operations you want to synchronize\n *      to the camera rendering you must call gl.endFrameExp() to display it\n *      on the screen. This is also provided in case you want to do other\n *      rendering using WebGL. Not needed when `autorender` is true.\n *    - __cameraTexture__ The underlying cameraTexture. This can be used to\n *      implement your own __updateCameraPreview__.\n *\n * ```js\n * import { Camera } from 'expo-camera';\n * import { cameraWithTensors } from '@tensorflow/tfjs-react-native';\n *\n * const TensorCamera = cameraWithTensors(Camera);\n *\n * class MyComponent {\n *\n *   handleCameraStream(images, updatePreview, gl) {\n *     const loop = async () => {\n *       const nextImageTensor = images.next().value\n *\n *       //\n *       // do something with tensor here\n *       //\n *\n *       // if autorender is false you need the following two lines.\n *       // updatePreview();\n *       // gl.endFrameEXP();\n *\n *       requestAnimationFrame(loop);\n *     }\n *     loop();\n *   }\n *\n *   render() {\n *    // Currently expo does not support automatically determining the\n *    // resolution of the camera texture used. So it must be determined\n *    // empirically for the supported devices and preview size.\n *\n *    let textureDims;\n *    if (Platform.OS === 'ios') {\n *     textureDims = {\n *       height: 1920,\n *       width: 1080,\n *     };\n *    } else {\n *     textureDims = {\n *       height: 1200,\n *       width: 1600,\n *     };\n *    }\n *\n *    return <View>\n *      <TensorCamera\n *       // Standard Camera props\n *       style={styles.camera}\n *       type={Camera.Constants.Type.front}\n *       // Tensor related props\n *       cameraTextureHeight={textureDims.height}\n *       cameraTextureWidth={textureDims.width}\n *       resizeHeight={200}\n *       resizeWidth={152}\n *       resizeDepth={3}\n *       onReady={this.handleCameraStream}\n *       autorender={true}\n *      />\n *    </View>\n *   }\n * }\n * ```\n *\n * @param CameraComponent an expo Camera component constructor\n */\n/** @doc {heading: 'Media', subheading: 'Camera'} */\nexport function cameraWithTensors<T extends WrappedComponentProps>(\n  // tslint:disable-next-line: variable-name\n  CameraComponent: React.ComponentType<T>,\n) {\n  return class CameraWithTensorStream\n    extends React.Component<T & Props, State> {\n    camera: Camera;\n    glView: GLView;\n    glContext: ExpoWebGLRenderingContext;\n    rafID: number;\n\n    constructor(props: T & Props) {\n      super(props);\n      this.onCameraLayout = this.onCameraLayout.bind(this);\n      this.onGLContextCreate = this.onGLContextCreate.bind(this);\n\n      this.state = {\n        cameraLayout: null,\n      };\n    }\n\n    componentWillUnmount() {\n      cancelAnimationFrame(this.rafID);\n      if(this.glContext) {\n        GLView.destroyContextAsync(this.glContext);\n      }\n      this.camera = null;\n      this.glView = null;\n      this.glContext = null;\n    }\n\n    /*\n     * Measure the camera component when it is laid out so that we can overlay\n     * the GLView.\n     */\n    onCameraLayout(event: LayoutChangeEvent) {\n      const { x, y, width, height } = event.nativeEvent.layout;\n      this.setState({\n        cameraLayout: { x, y, width, height },\n      });\n    }\n\n    /**\n     * Creates a WebGL texture that is updated by the underlying platform to\n     * contain the contents of the camera.\n     */\n    async createCameraTexture(): Promise<WebGLTexture> {\n      if (this.glView != null && this.camera != null) {\n        //@ts-ignore\n        return this.glView.createCameraTextureAsync(this.camera);\n      } else {\n        throw new Error('Expo GL context or camera not available');\n      }\n    }\n\n    /**\n     * Callback for GL context creation. We do mose of the work of setting\n     * up the component here.\n     * @param gl\n     */\n    async onGLContextCreate(gl: ExpoWebGLRenderingContext) {\n      this.glContext = gl;\n      const cameraTexture = await this.createCameraTexture();\n      await detectGLCapabilities(gl);\n\n      // Optionally set up a render loop that just displays the camera texture\n      // to the GLView.\n      const autorender =\n        this.props.autorender != null\n          ? this.props.autorender\n          : DEFAULT_AUTORENDER;\n      const updatePreview = this.previewUpdateFunc(gl, cameraTexture);\n      if (autorender) {\n        const renderLoop = () => {\n          updatePreview();\n          gl.endFrameEXP();\n          this.rafID = requestAnimationFrame(renderLoop);\n        };\n        renderLoop();\n      }\n\n      const {\n        resizeHeight,\n        resizeWidth,\n        resizeDepth,\n        cameraTextureHeight,\n        cameraTextureWidth,\n      } = this.props;\n\n      //\n      //  Set up a generator function that yields tensors representing the\n      // camera on demand.\n      //\n      const cameraStreamView = this;\n      function* nextFrameGenerator() {\n        const RGBA_DEPTH = 4;\n        const textureDims = {\n          height: cameraTextureHeight,\n          width: cameraTextureWidth,\n          depth: RGBA_DEPTH,\n        };\n\n        const targetDims = {\n          height: resizeHeight,\n          width: resizeWidth,\n          depth: resizeDepth || DEFAULT_RESIZE_DEPTH,\n        };\n\n        while (cameraStreamView.glContext != null) {\n          const imageTensor = fromTexture(\n            gl,\n            cameraTexture,\n            textureDims,\n            targetDims\n          );\n          yield imageTensor;\n        }\n      }\n      const nextFrameIterator = nextFrameGenerator();\n\n      // Pass the utility functions to the caller provided callback\n      this.props.onReady(nextFrameIterator, updatePreview, gl, cameraTexture);\n    }\n\n    /**\n     * Helper function that can be used to update the GLView framebuffer.\n     *\n     * @param gl the open gl texture to render to\n     * @param cameraTexture the texture to draw.\n     */\n    previewUpdateFunc(\n      gl: ExpoWebGLRenderingContext,\n      cameraTexture: WebGLTexture\n    ) {\n      const renderFunc = () => {\n        const { cameraLayout } = this.state;\n        const width = PixelRatio.getPixelSizeForLayoutSize(cameraLayout.width);\n        const height = PixelRatio.getPixelSizeForLayoutSize(\n          cameraLayout.height\n        );\n        const isFrontCamera =\n          this.camera.props.type === Camera.Constants.Type.front;\n        const flipHorizontal =\n          Platform.OS === 'ios' && isFrontCamera ? false : true;\n\n        renderToGLView(gl, cameraTexture, { width, height }, flipHorizontal);\n      };\n\n      return renderFunc.bind(this);\n    }\n\n    /**\n     * Render the component\n     */\n    render() {\n      const { cameraLayout } = this.state;\n\n      // Before passing props into the original wrapped component we want to\n      // remove the props that we augment the component with.\n\n      // Use this object to use typescript to check that we are removing\n      // all the tensorCamera properties.\n      const tensorCameraPropMap: Props = {\n        cameraTextureWidth: null,\n        cameraTextureHeight: null,\n        resizeWidth: null,\n        resizeHeight: null,\n        resizeDepth: null,\n        autorender: null,\n        onReady: null,\n      };\n      const tensorCameraPropKeys = Object.keys(tensorCameraPropMap);\n\n      const cameraProps: WrappedComponentProps = {};\n      const allProps = Object.keys(this.props);\n      for (let i = 0; i < allProps.length; i++) {\n        const key = allProps[i];\n        if (!tensorCameraPropKeys.includes(key)) {\n          cameraProps[key] = this.props[key];\n        }\n      }\n\n      // Set up an on layout handler\n      const onlayout = this.props.onLayout ? (e: LayoutChangeEvent) => {\n        this.props.onLayout(e);\n        this.onCameraLayout(e);\n      } : this.onCameraLayout;\n\n      cameraProps.onLayout = onlayout;\n\n      const cameraComp = (\n        //@ts-ignore see https://github.com/microsoft/TypeScript/issues/30650\n        <CameraComponent\n          key='camera-with-tensor-camera-view'\n          {...(cameraProps)}\n          ref={(ref: Camera) => (this.camera = ref)}\n        />\n      );\n\n      // Create the glView if the camera has mounted.\n      let glViewComponent = null;\n      if (cameraLayout != null) {\n        const styles = StyleSheet.create({\n          glView: {\n            position: 'absolute',\n            left: cameraLayout.x,\n            top: cameraLayout.y,\n            width: cameraLayout.width,\n            height: cameraLayout.height,\n            zIndex: this.props.style.zIndex ?\n              parseInt(this.props.style.zIndex, 10) + 10 : 10,\n          }\n\n        });\n\n        glViewComponent = (\n          <GLView\n            key='camera-with-tensor-gl-view'\n            style={styles.glView}\n            onContextCreate={this.onGLContextCreate}\n            ref={ref => (this.glView = ref)}\n          />\n        );\n      }\n\n      return [cameraComp, glViewComponent];\n    }\n  };\n}\n"]}